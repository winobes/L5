if (current_room == 0) {
	
	if (!room[0].initialized) {	

		room[0].w = 2000;
		room[0].h = 2000;

		room[0].background_buffer = al_create_bitmap(room[0].w, room[0].h);
		room[0].background = al_create_bitmap (room[0].w, room[0].h);

		al_set_target_bitmap(room[0].background);
		//if we need to tile the background, do it here.
	
		al_set_target_backbuffer(display);



		room[0].nwalls = 2;
		room[0].wall = malloc(room[0].nwalls * sizeof(struct Wall));


		//initializing walls
		room[0].wall[0].ext.nverts = 4;
		room[0].wall[0].ext.vert = malloc(room[0].wall[0].ext.nverts * sizeof(float*));
		for (i = 0; i < room[0].wall[0].ext.nverts; i++) {
			room[0].wall[0].ext.vert[i] = malloc(2 * sizeof(room[0].wall[0].ext.vert[i]));
		}
		
		room[0].wall[0].h = 20;
		room[0].wall[0].w = 980;
		room[0].wall[0].d = 0;

		room[0].wall[0].ext.vert[0][0] = 0;
		room[0].wall[0].ext.vert[0][1] = 0;

		room[0].wall[0].ext.vert[1][0] = room[0].wall[0].ext.vert[0][0] + room[0].wall[0].w;
		room[0].wall[0].ext.vert[1][1] = 0;

		room[0].wall[0].ext.vert[2][0] = room[0].wall[0].ext.vert[0][0] + room[0].wall[0].w;
		room[0].wall[0].ext.vert[2][1] = room[0].wall[0].ext.vert[0][1] + room[0].wall[0].h;

		room[0].wall[0].ext.vert[3][0] = 0;
		room[0].wall[0].ext.vert[3][1] = room[0].wall[0].ext.vert[0][1] + room[0].wall[0].h;

		room[0].wall[0].sprite = al_load_bitmap("gfx/wall0.png");
		room[0].wall[0].solid = true;
		room[0].wall[0].exists = true;







		room[0].wall[1].ext.nverts = 4;
		room[0].wall[1].ext.vert = malloc(room[0].wall[1].ext.nverts * sizeof(float*));
		for (i = 0; i < room[0].wall[1].ext.nverts; i++) {
			room[0].wall[1].ext.vert[i] = malloc(2 * sizeof(room[0].wall[1].ext.vert[i]));
		}

		room[0].wall[1].h = 100;
		room[0].wall[1].w = 600;
		room[0].wall[1].d = ALLEGRO_PI/8;

		room[0].wall[1].ext.vert[0][0] = 200;
		room[0].wall[1].ext.vert[0][1] = 200;

		calculate_verts_wall(&room[0].wall[1].ext, room[0].wall[1].w, room[0].wall[1].h, room[0].wall[1].d);

		room[0].wall[1].sprite = al_load_bitmap("gfx/wall3.png");
		room[0].wall[1].solid = true;
		room[0].wall[1].exists = true;








		room [0].initialized = true;

	}
}







if (current_room == 1) {

	if (!room[1].initialized) {

		room[1].w = 2000;
		room[1].h = 2000;

	
		room[1].background_buffer = al_create_bitmap(room[1].w, room[1].h);
		room[1].background = al_create_bitmap (room[1].w, room[1].h);

		al_set_target_bitmap(room[1].background);
		//if we need to tile the background, do it here.

		al_set_target_backbuffer(display);


		room[1].nwalls = 1;
		room[1].wall= malloc(room[1].nwalls * sizeof(struct Wall));

		//initializing walls
		room[1].wall[0].ext.nverts = 4;
		room[1].wall[0].ext.vert = malloc(room[1].wall[0].ext.nverts * sizeof(float*));
		for (i = 0; i < room[1].wall[0].ext.nverts; i++) {
			room[1].wall[0].ext.vert[i] = malloc(2 * sizeof(room[1].wall[0].ext.vert[i]));
		}
		
		room[1].wall[0].h = 980;
		room[1].wall[0].w = 20;

		room[1].wall[0].ext.vert[0][0] = 1000;
		room[1].wall[0].ext.vert[0][1] = 0;

		room[1].wall[0].ext.vert[1][0] = room[1].wall[0].ext.vert[0][0] + room[1].wall[0].w;
		room[1].wall[0].ext.vert[1][1] = 0;

		room[1].wall[0].ext.vert[2][0] = room[1].wall[0].ext.vert[0][0] + room[1].wall[0].w;
		room[1].wall[0].ext.vert[2][1] = room[1].wall[0].ext.vert[0][1] + room[1].wall[0].h;

		room[1].wall[0].ext.vert[3][0] = 0;
		room[1].wall[0].ext.vert[3][1] = room[1].wall[0].ext.vert[0][1] + room[1].wall[0].h;

		room[1].wall[0].sprite = al_load_bitmap("gfx/wall1.png");
		room[1].wall[0].solid = true;
		room[1].wall[0].exists = true;
		
		room[1].initialized = true;
	
	}

}



	
